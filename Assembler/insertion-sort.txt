    mov r0 512   // r0 = address of length
    ldr 32 r1 r0 // r1 = length
    sub r2 r1 1  // r2 = length - 1
    mov r3 4     // r3 = data width
    add r0 r0 r3 // r0 = data
    mov r16 0 // i = 0
outer:
    cmp r16 r2 // i < (length - 1)
    b eq outer_done

    add r17 r16 1 // j = i+1
inner:
    cmp r17 r1 // j < length
    b eq inner_done

    mul r18 r16 r3 // r18 = i * 4
    add r19 r18 r0 // r19 = num + (i * 4)
    ldr 32 r18 r19    // r18 = *(array + (i * 4))

    mul r20 r17 r3 // r20 = j * 4
    add r21 r20 r0 // r21 = num + (j * 4)
    ldr 32 r20 r21    // r20 = *(num + (j * 4))

    cmp r18 r20    // num[i] < num[j]
    b lt no_swap
    b eq no_swap

    str r20 r19 // swap
    str r18 r21 // swap
no_swap:
    add r17 r17 1
    b al inner
inner_done:
    add r16 r16 1
    b al outer

outer_done:
    hlt